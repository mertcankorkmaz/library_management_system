import random
import locale

locale.setlocale(locale.LC_ALL, 'en_US.UTF-8')

class Library:
    def __init__(self):
        self.filename = "books.txt"
        self.file = open(self.filename, "a+")

    def __del__(self):
        self.file.close()

    def list_books(self):
        self.file.seek(0)
        books = self.file.readlines()
        if not books:
            print("No books available.")
        else:
            books.sort(key=lambda x: x.split(',')[0].lower())  # Sort by book titles in lowercase
            for book in books:
                book_info = book.strip().split(',')
                print(f"Book: {book_info[0]}, Author: {book_info[1]}, Release Year: {book_info[2]}, Pages: {book_info[3]}")

    def add_book(self):
        title = input("Enter book title: ")
        author = input("Enter book author: ")
        while True:
            release_year = input("Enter first release year (integer): ")
            if release_year.isdigit():
                release_year = int(release_year)
                break
            else:
                print("Please enter a valid integer value for release year.")
        while True:
            num_pages = input("Enter number of pages (integer): ")
            if num_pages.isdigit():
                num_pages = int(num_pages)
                break
            else:
                print("Please enter a valid integer value for number of pages.")
        
        # Check if the book with the same title and author already exists
        self.file.seek(0)
        books = self.file.readlines()
        for book in books:
            if title == book.strip().split(',')[0].lower() and author == book.strip().split(',')[1].lower():
                print("A book with the same title and author already exists.")
                return
        
        # Add the new book and write to file sorted alphabetically
        new_book_info = f"{title},{author},{release_year},{num_pages}\n"
        books.append(new_book_info)
        books.sort(key=lambda x: x.split(',')[0].lower())  # Sort alphabetically
        self.file.seek(0)
        self.file.truncate()
        self.file.writelines(books)
        print("Book added successfully.")

    def remove_book(self):
        title = input("Enter the title of the book to remove: ").strip().lower()
        self.file.seek(0)
        books = self.file.readlines()
        updated_books = []
        removed = False
        for book in books:
            if title == book.strip().split(',')[0].lower():
                book_info = book.strip().split(',')
                print(f"Book found: {book_info[0]}, Author: {book_info[1]}, Release Year: {book_info[2]}, Pages: {book_info[3]}")
                removed = True
            else:
                updated_books.append(book)
        if not removed:
            print("Book not found.")
        else:
            self.file.seek(0)
            self.file.truncate()
            self.file.writelines(updated_books)
            print("Book removed successfully.")

    def update_book(self):
        title = input("Enter the title of the book to update: ").strip().lower()
        self.file.seek(0)
        books = self.file.readlines()
        updated_books = []
        book_updated = False
        for book in books:
            if title == book.strip().split(',')[0].lower():
                book_info = book.strip().split(',')
                print(f"Book found: {book_info[0]}, Author: {book_info[1]}, Release Year: {book_info[2]}, Pages: {book_info[3]}")
                new_title = input("Enter new title (leave blank to keep the same): ")
                new_author = input("Enter new author (leave blank to keep the same): ")
                new_release_year = input("Enter new release year (leave blank to keep the same): ")
                new_num_pages = input("Enter new number of pages (leave blank to keep the same): ")
                
                # Keep old values if inputs are empty
                new_title = new_title if new_title else book_info[0]
                new_author = new_author if new_author else book_info[1]
                new_release_year = int(new_release_year) if new_release_year.isdigit() else int(book_info[2])
                new_num_pages = int(new_num_pages) if new_num_pages.isdigit() else int(book_info[3])

                updated_book_info = f"{new_title},{new_author},{new_release_year},{new_num_pages}\n"
                updated_books.append(updated_book_info)
                book_updated = True
            else:
                updated_books.append(book)
        if book_updated:
            self.file.seek(0)
            self.file.truncate()
            self.file.writelines(updated_books)
            print("Book updated successfully.")
        else:
            print("Book not found.")
    
    def recommend_book(self):
        self.file.seek(0)
        books = self.file.readlines()
        if not books:
            print("No books available for recommendation.")
        else:
            random_book = random.choice(books)
            book_info = random_book.strip().split(',')
            print(f"Recommended Book: {book_info[0]}, Author: {book_info[1]}, Release Year: {book_info[2]}, Pages: {book_info[3]}")

# Create an object named “lib” with “Library” class.
lib = Library()

# Create a menu to interact with the “lib” object.
while True:
    print("\n*** MENU ***")
    print("1) List Books")
    print("2) Add Book")
    print("3) Remove Book")
    print("4) Update Book")
    print("5) Recommend Book")
    print("6) Exit")

    choice = input("Enter your choice: ")

    if choice == "1":
        lib.list_books()
    elif choice == "2":
        lib.add_book()
    elif choice == "3":
        lib.remove_book()
    elif choice == "4":
        lib.update_book()
    elif choice == "5":
        lib.recommend_book()
    elif choice == "6":
        print("Exiting program...")
        break
    else:
        print("Invalid choice. Please try again.")
